{"ast":null,"code":"var _jsxFileName = \"/home/rute/git/pokestore/src/nestedGrid.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Grid } from '@material-ui/core';\nimport PokeCard from './pokeCard';\nimport axios from 'axios';\n\nfunction NestedGrid(props) {\n  const [pokemonData, setPokemonData] = useState([]);\n  const [pokemonList, setPokemonList] = useState([]);\n  useEffect(() => {\n    async function getData() {\n      const response = await axios.get('https://pokeapi.co/api/v2/pokemon/');\n      setPokemonData(response.data.results);\n    }\n\n    getData();\n\n    async function getPokemon(pokemon_info) {\n      const response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemon_info.name}`);\n      let id = pokemon_info.url.split('/')[pokemon_info.url.split('/').length - 2];\n      let image = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;\n      response.data['id'] = id;\n      response.data['image'] = image;\n      response.data['name'] = pokemon_info.name;\n      setPokemonList([...pokemonList, response.data]);\n    }\n\n    pokemonData.map(aPokemon => getPokemon(aPokemon));\n  }, pokemonData, pokemonList);\n\n  function logData(data) {\n    props.logapp(data);\n  }\n\n  function GridLine() {\n    console.log(pokemonData); // return(\n    //     pokemonData.map((pokemon, i) =>(  \n    //             <Grid key={i} item xs={2}>\n    //                 <PokeCard \n    //                     name={pokemon.name} \n    //                     image = {`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.url.split('/')[pokemon.url.split('/').length - 2]}.png`}\n    //                     price = {Math.floor((Math.random() * 1000) + 1)}\n    //                     log= {logData}\n    //                 >\n    //                 </PokeCard>\n    //             </Grid>))\n    //     )\n\n    console.log(pokemonList);\n    return pokemonList.map((pokemon, i) => /*#__PURE__*/React.createElement(Grid, {\n      key: i,\n      item: true,\n      xs: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(PokeCard, {\n      name: pokemon.name,\n      image: pokemon.image,\n      price: Math.floor(Math.random() * 1000 + 1),\n      log: logData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(GridLine, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default NestedGrid;","map":{"version":3,"sources":["/home/rute/git/pokestore/src/nestedGrid.js"],"names":["React","useEffect","useState","Grid","PokeCard","axios","NestedGrid","props","pokemonData","setPokemonData","pokemonList","setPokemonList","getData","response","get","data","results","getPokemon","pokemon_info","name","id","url","split","length","image","map","aPokemon","logData","logapp","GridLine","console","log","pokemon","i","Math","floor","random"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Grid, } from '@material-ui/core'\nimport PokeCard from './pokeCard';\nimport axios from 'axios';\n\n\nfunction NestedGrid(props){\n\n    const [pokemonData, setPokemonData] = useState([]) \n    const [pokemonList,setPokemonList] = useState([])\n\n    useEffect(() =>{\n        async function getData(){\n            const response = await axios.get(\n                'https://pokeapi.co/api/v2/pokemon/'\n            );\n            setPokemonData(response.data.results)\n        }\n        getData()\n\n        async function getPokemon(pokemon_info){\n            const response = await axios.get(\n                `https://pokeapi.co/api/v2/pokemon/${pokemon_info.name}`\n            );\n                \n            let id = pokemon_info.url.split('/')[pokemon_info.url.split('/').length - 2]\n            let image = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`\n            response.data['id'] = id;\n            response.data['image'] = image\n            response.data['name'] = pokemon_info.name\n\n            setPokemonList([...pokemonList,response.data])\n        }\n\n        pokemonData.map(aPokemon=>getPokemon(aPokemon))\n    }, pokemonData, pokemonList)\n\n    function logData(data){\n        props.logapp(data)\n    }\n\n    function GridLine(){  \n        console.log(pokemonData)\n        // return(\n        //     pokemonData.map((pokemon, i) =>(  \n        //             <Grid key={i} item xs={2}>\n        //                 <PokeCard \n        //                     name={pokemon.name} \n        //                     image = {`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.url.split('/')[pokemon.url.split('/').length - 2]}.png`}\n        //                     price = {Math.floor((Math.random() * 1000) + 1)}\n        //                     log= {logData}\n        //                 >\n        //                 </PokeCard>\n        //             </Grid>))\n                       \n        //     )\n        console.log(pokemonList)\n        return(\n            \n            pokemonList.map((pokemon, i) =>(  \n                    <Grid key={i} item xs={2}>\n                        <PokeCard \n                            name={pokemon.name} \n                            image = {pokemon.image}\n                            price = {Math.floor((Math.random() * 1000) + 1)}\n                            log= {logData}\n                        >\n                        </PokeCard>\n                    </Grid>))\n                       \n            )\n   }\n    return(            \n        <>\n            <Grid container spacing={1}>\n                <Grid container item xs={12} spacing={1}>   \n                    <GridLine></GridLine>\n                </Grid>\n            </Grid>\n                \n        </>\n    )\n}\nexport default NestedGrid;"]},"metadata":{},"sourceType":"module"}