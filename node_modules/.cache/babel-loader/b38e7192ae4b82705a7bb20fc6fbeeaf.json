{"ast":null,"code":"var _jsxFileName = \"/home/rute/git/pokestore/src/nestedGrid.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Grid } from '@material-ui/core';\nimport PokeCard from './pokeCard';\nimport axios from 'axios';\nlet dictId = {};\n\nfor (let i = 1; i <= 808; i++) {\n  dictId[i] = Math.floor(Math.random() * 1000 + 1);\n}\n\nfunction NestedGrid(props) {\n  const [pokemonData, setPokemonData] = useState([]);\n  const [pokemonList, setPokemonList] = useState([]);\n  useEffect(() => {\n    async function getData() {\n      const response = await axios.get('https://pokeapi.co/api/v2/pokemon/');\n      setPokemonData(response.data.results);\n    }\n\n    getData();\n  }, []); // useEffect(()=>{\n  //     async function getPokemon(pokemon_info){\n  //         const response = await axios.get(\n  //             `https://pokeapi.co/api/v2/pokemon/${pokemon_info.name}`\n  //         );\n  //         let id = pokemon_info.url.split('/')[pokemon_info.url.split('/').length - 2]\n  //         let image = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`\n  //         response.data['id'] = id;\n  //         response.data['image'] = image\n  //         response.data['name'] = pokemon_info.name\n  //         setPokemonList((p) => ([...pokemonList,response.data]))\n  //     }\n  //     pokemonData.map(aPokemon=>getPokemon(aPokemon))\n  //     console.log('list ', pokemonList)\n  // }, [pokemonData])\n\n  function logData(data) {\n    props.logapp(data);\n  }\n\n  function GridLine() {\n    console.log(pokemonData);\n    return pokemonData.map((pokemon, i) => /*#__PURE__*/React.createElement(Grid, {\n      key: i,\n      item: true,\n      xs: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(PokeCard, {\n      name: pokemon.name,\n      image: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.url.split('/')[pokemon.url.split('/').length - 2]}.png`,\n      price: dictId[pokemon.url.split('/')[pokemon.url.split('/').length - 2]],\n      log: logData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }\n    }))); // console.log(pokemonList)\n    // return(\n    //     pokemonList.map((pokemon, i) =>(  \n    //             <Grid key={i} item xs={2}>\n    //                 <PokeCard \n    //                     name={pokemon.name} \n    //                     image = {pokemon.image}\n    //                     price = {Math.floor((Math.random() * 1000) + 1)}\n    //                     log= {logData}\n    //                 >\n    //                 </PokeCard>\n    //             </Grid>))\n    //     )\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(GridLine, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default NestedGrid;","map":{"version":3,"sources":["/home/rute/git/pokestore/src/nestedGrid.js"],"names":["React","useEffect","useState","Grid","PokeCard","axios","dictId","i","Math","floor","random","NestedGrid","props","pokemonData","setPokemonData","pokemonList","setPokemonList","getData","response","get","data","results","logData","logapp","GridLine","console","log","map","pokemon","name","url","split","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Grid, } from '@material-ui/core'\nimport PokeCard from './pokeCard';\nimport axios from 'axios';\n\n\nlet dictId = {}\nfor (let i=1; i <= 808; i++){\n    dictId[i] = Math.floor((Math.random() * 1000) + 1)\n}\n\nfunction NestedGrid(props){\n\n    const [pokemonData, setPokemonData] = useState([]) \n    const [pokemonList,setPokemonList] = useState([])\n\n    useEffect(() =>{\n        async function getData(){\n            const response = await axios.get(\n                'https://pokeapi.co/api/v2/pokemon/'\n            );\n            setPokemonData(response.data.results)\n        }\n        getData()\n    },[] )\n\n    // useEffect(()=>{\n    //     async function getPokemon(pokemon_info){\n    //         const response = await axios.get(\n    //             `https://pokeapi.co/api/v2/pokemon/${pokemon_info.name}`\n    //         );\n                \n    //         let id = pokemon_info.url.split('/')[pokemon_info.url.split('/').length - 2]\n    //         let image = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`\n    //         response.data['id'] = id;\n    //         response.data['image'] = image\n    //         response.data['name'] = pokemon_info.name\n\n    //         setPokemonList((p) => ([...pokemonList,response.data]))\n    //     }\n\n    //     pokemonData.map(aPokemon=>getPokemon(aPokemon))\n    //     console.log('list ', pokemonList)\n    // }, [pokemonData])\n\n    function logData(data){\n        props.logapp(data)\n    }\n    \n\n    function GridLine(){  \n        console.log(pokemonData)\n        return(\n            pokemonData.map((pokemon, i) =>(  \n                    <Grid key={i} item xs={2}>\n                        <PokeCard \n                            name={pokemon.name} \n                            image = {`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.url.split('/')[pokemon.url.split('/').length - 2]}.png`}\n                            price = {dictId[pokemon.url.split('/')[pokemon.url.split('/').length - 2]]}\n                            log= {logData}\n                        >\n                        </PokeCard>\n                    </Grid>))\n                       \n            )\n        // console.log(pokemonList)\n        // return(\n            \n        //     pokemonList.map((pokemon, i) =>(  \n        //             <Grid key={i} item xs={2}>\n        //                 <PokeCard \n        //                     name={pokemon.name} \n        //                     image = {pokemon.image}\n        //                     price = {Math.floor((Math.random() * 1000) + 1)}\n        //                     log= {logData}\n        //                 >\n        //                 </PokeCard>\n        //             </Grid>))\n                       \n        //     )\n   }\n    return(            \n        <>\n            <Grid container spacing={1}>\n                <Grid container item xs={12} spacing={1}>   \n                    <GridLine></GridLine>\n                </Grid>\n            </Grid>\n                \n        </>\n    )\n}\nexport default NestedGrid;"]},"metadata":{},"sourceType":"module"}